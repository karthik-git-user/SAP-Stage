<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
-->
<!--
 All hybris buildcallbacks.xml macrodefinitions:
 
 Build/Documentation
 
	 before/after ant macro "clean"
		 <macrodef name="sapppspricing_before_clean"/>
		 <macrodef name="sapppspricing_after_clean"/>
	 
	 before/after ant macro "build"
		 <macrodef name="sapppspricing_before_build"/>
		 <macrodef name="sapppspricing_after_build"/>
		 
	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="sapppspricing_before_compile_core">
		 <macrodef name="sapppspricing_after_compile_core">
	 
	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="sapppspricing_before_compile_web" />
		 <macrodef name="sapppspricing_after_compile_web" />
	 
	 before/after ant macro "compile_hmc" - the hmc module of the extension
		 <macrodef name="sapppspricing_before_compile_hmc" />
		 <macrodef name="sapppspricing_after_compile_hmc" />
 
 Preparing extension
 
	 will be called in the beginning of the ant call and only once (also when using multiple 
	 ant targets e.g. ant build yunittest)	
		 <macrodef name="sapppspricing_only_once_prepare"/>
 
 Creating ear module/production
 
	 before/after ant macro "ear"
		 <macrodef name="sapppspricing_before_ear"/>
		 <macrodef name="sapppspricing_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="sapppspricing_before_production" />
		 <macrodef name="sapppspricing_after_production" />
 
 JUnit Test
 
	 before/after ant macro "yunitinit" 
		 <macrodef name="sapppspricing_before_yunitinit" />
		 <macrodef name="sapppspricing_after_yunitinit" />
	 
	 before/after ant macro "yunit"
		 <macrodef name="sapppspricing_before_yunit" />
		 <macrodef name="sapppspricing_after_yunit" /> 
		 
 Distribution package
 
 	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="sapppspricing_after_dist"/>
		 <macrodef name="sapppspricing_before_dist"/>
	 
	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="sapppspricing_before_dist_copy"/>
		 <macrodef name="sapppspricing_after_dist_copy"/>
		  
 	 With these filters you can override the default extension filters defined in platform/resources/ant/dist/filtersets.xml
 	  	 <patternset id="extension.sapppspricing.binary.filter">
 	  	  	 <patternset refid="extension.filter" />
 	  	  	 <exclude name="**/*-source.jar" />
 	  	 </patternset>
 	  	 <patternset id="extension.sapppspricing.source.filter">
 	  	  	 <exclude name="**/bin/**" />
 	  	 </patternset>
 
-->
<project name="sapppspricing_buildcallbacks">

	<!-- 
	    Called whenever 'ant ear' is used. this callback can be used to modify the content of the ear file
	
	     ${ear.path}: 			path to ear
	 -->
	<macrodef name="sapppspricing_before_ear">
		<sequential>
			<!-- you can do anything before the EAR file is being packed -->
		</sequential>
	</macrodef>

	<!-- See https://help.hybris.com/6.0.0/hcd/5e097b4cb9e8472380b7bd41d3a58279.html -->	
   <macrodef name="sapppspricing_after_build_all_extensions">
      <sequential>
         <foreachextIf>
            <test>
               <contains string="${ext.@{extname}.extension.meta.extends.webmodules}" substring="sapppspricingwebapp"/>
            </test>
            <do>
               <compile_and_copy_web_addon tgtExt="sapppspricing" srcExt="@{extname}" addonFolder="sapppspricingwebapp"/>
            </do>
         </foreachextIf>
      </sequential>
   </macrodef>
 
   <macrodef name="sapppspricing_before_web_clean">
      <sequential>
         <delete failonerror="false">
            <fileset dir="${ext.tgtext.path}/web/webroot/WEB-INF/lib">
               <include name="*_sapppspricingwebapp.jar" />
            </fileset>
         </delete>
      </sequential>
   </macrodef>	

</project>
