$cpiTenantHostName=https://tester.hana.ondemand.com

$consentPers=({{ SELECT {ct.pk} FROM {ConsentTemplate AS ct} WHERE {ct.id}='SAPYMKT_PERS' }})                                                          
$consentFilterInteraction=({{ SELECT {cons.customer} FROM {Consent AS cons} WHERE {cons.consentTemplate} IN $consentPers AND ?session.user.currentTime > {cons.consentGivenDate} AND \
({cons.consentWithdrawnDate} IS NULL OR ?session.user.currentTime < {cons.consentWithdrawnDate}) AND {item.modifiedtime} > {cons.consentGivenDate} }}) 
$customerFilter=({{ SELECT {pk} FROM {Customer} }})                                                                                                    
                                                                                                                                                       
################################################################                                                                                       
# This sets up the credential (username/password) called "mktCPIBasicCredentails"                                                                      
# ##############################################################                                                                                       
INSERT_UPDATE BasicCredential ; id[unique = true]      ; username ; password 
                              ; mktCPIBasicCredentails ; username ; password 
                              
                              
###############################################################
# This sets up the endpoint called "mktCPIOrderEndpoint."
# #############################################################
INSERT_UPDATE Endpoint ; id[unique = true]   ; version[unique = true] ; name                ; specUrl                                                                                                    
                       ; mktCPIOrderEndpoint ; unknown                ; mktCPIOrderEndpoint ; "$cpiTenantHostName/gw/odata/SAP/REPLICATE-ORDER-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1/$metadata" 
                       
##############################################################
# This sets up a ConsumedDestination called "mktCPIOrderDestination."
# It uses the Endpoint and BasicCredential created above. The user calls
# the Outbound Service with the destination ID (e.g. "mktCPIOrderDestination").
# The Outbound Service looks up the details of the destination by ID,
# so it knows where to send the data
# ############################################################
INSERT_UPDATE DestinationTarget ; id[unique = true]            
                                ; mktCPIOrderDestinationTarget 
                                
INSERT_UPDATE ConsumedDestination ; id[unique = true]      ; url                                                                                                     ; endpoint(id, version)       ; credential(id)         ; destinationTarget(id)[default = mktCPIOrderDestinationTarget] ; additionalProperties(key, value)[map-delimiter=|]                                                         
                                  ; mktCPIOrderDestination ; "$cpiTenantHostName/gw/odata/SAP/REPLICATE-ORDER-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1/Orders" ; mktCPIOrderEndpoint:unknown ; mktCPIBasicCredentails ;                                                               ; "csrfURL->$cpiTenantHostName/gw/odata/SAP/REPLICATE-ORDER-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1" 
                                  
################################################################
# Setup Outbound Sync configuration container
# ##############################################################
INSERT_UPDATE OutboundSyncStreamConfigurationContainer ; id[unique = true]                 ;  
                                                       ; mktCPIOrderOutboundSyncDataStream ;  
                                                       
INSERT_UPDATE OutboundSyncJob ; code[unique = true]             ; streamConfigurationContainer(id)  
                              ; mktCPIoDataOrderOutboundSyncJob ; mktCPIOrderOutboundSyncDataStream 
                              
INSERT_UPDATE OutboundChannelConfiguration ; code[unique = true]            ; integrationObject(code) ; destination(id)        
                                           ; outboundSyncMktCPIOrderChannel ; MKTOutboundOrder        ; mktCPIOrderDestination 
                                           
# Set up a Order stream that will detect changes made to the Order and include it in the mktCPIOrderOutboundSyncDataStream StreamConfigurationContainer
INSERT_UPDATE OutboundSyncStreamConfiguration ; streamId[unique = true]   ; container(id)                     ; itemTypeForStream(code) ; outboundChannelConfiguration(code) ; whereClause                                                                 ;  
                                              ; mktCPIOrderOutboundStream ; mktCPIOrderOutboundSyncDataStream ; Order                   ; outboundSyncMktCPIOrderChannel     ; {item.user} IN $customerFilter AND {item.user} IN $consentFilterInteraction 
                                              
INSERT_UPDATE OutboundSyncCronJob ; code[unique = true]            ; job(code)                       ; sessionLanguage(isoCode)[default = en] 
                                  ; mktCPIOrderOutboundSyncCronJob ; mktCPIoDataOrderOutboundSyncJob ;                                        
