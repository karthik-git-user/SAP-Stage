$cpiTenantHostName=https://tester.hana.ondemand.com

$consentPers=({{ SELECT {ct.pk} FROM {ConsentTemplate AS ct} WHERE {ct.id}='SAPYMKT_PERS' }})                                                          
$consentFilterInteraction=({{ SELECT {cons.customer} FROM {Consent AS cons} WHERE {cons.consentTemplate} IN $consentPers AND ?session.user.currentTime > {cons.consentGivenDate} AND \
({cons.consentWithdrawnDate} IS NULL OR ?session.user.currentTime < {cons.consentWithdrawnDate}) AND {item.modifiedtime} > {cons.consentGivenDate} }}) 
$customerFilter=({{ SELECT {pk} FROM {Customer} }})                                                                                                    
                                                                                                                                                       
################################################################                                                                                       
# This sets up the credential (username/password) called "mktCPIBasicCredentails"                                                                      
# ##############################################################                                                                                       
INSERT_UPDATE BasicCredential ; id[unique = true]      ; username ; password 
                              ; mktCPIBasicCredentails ; username ; password 
                              
                              
###############################################################
# This sets up the endpoint called "mktCPIOrderEndpoint."
# #############################################################
INSERT_UPDATE Endpoint ; id[unique = true]       ; version[unique = true] ; name                    ; specUrl                                                                                                         
                       ; mktCPISavedCartEndpoint ; unknown                ; mktCPISavedCartEndpoint ; "$cpiTenantHostName/gw/odata/SAP/REPLICATE-SAVED-CART-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1/$metadata" 
                       
##############################################################
# This sets up a ConsumedDestination called "mktCPISavedCartDestination."
# It uses the Endpoint and BasicCredential created above. The user calls
# the Outbound Service with the destination ID (e.g. "mktCPISavedCartDestination").
# The Outbound Service looks up the details of the destination by ID,
# so it knows where to send the data
# ############################################################
INSERT_UPDATE DestinationTarget ; id[unique = true]                
                                ; mktCPISavedCartDestinationTarget 
                                
INSERT_UPDATE ConsumedDestination ; id[unique = true]          ; url                                                                                                         ; endpoint(id, version)           ; credential(id)         ; destinationTarget(id)[default = mktCPISavedCartDestinationTarget] ; additionalProperties(key, value)[map-delimiter=|]                                                              
                                  ; mktCPISavedCartDestination ; "$cpiTenantHostName/gw/odata/SAP/REPLICATE-SAVED-CART-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1/Carts" ; mktCPISavedCartEndpoint:unknown ; mktCPIBasicCredentails ;                                                                   ; "csrfURL->$cpiTenantHostName/gw/odata/SAP/REPLICATE-SAVED-CART-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1" 
                                  
################################################################
# Setup Outbound Sync configuration container
# ##############################################################
INSERT_UPDATE OutboundSyncStreamConfigurationContainer ; id[unique = true]                     ;  
                                                       ; mktCPISavedCartOutboundSyncDataStream ;  
                                                       
INSERT_UPDATE OutboundSyncJob ; code[unique = true]                 ; streamConfigurationContainer(id)      
                              ; mktCPIoDataSavedCartOutboundSyncJob ; mktCPISavedCartOutboundSyncDataStream 
                              
INSERT_UPDATE OutboundChannelConfiguration ; code[unique = true]                ; integrationObject(code) ; destination(id)            
                                           ; outboundSyncMktCPISavedCartChannel ; MktOutboundSavedCart    ; mktCPISavedCartDestination 
                                           
# Set up a Saved Cart stream that will detect changes made to the Saved Cart and include it in the mktCPISavedCartOutboundSyncDataStream StreamConfigurationContainer
INSERT_UPDATE OutboundSyncStreamConfiguration ; streamId[unique = true]            ; container(id)                         ; itemTypeForStream(code) ; outboundChannelConfiguration(code) ; whereClause                                                                                                                                                                                                                            ;  
                                              ; mktCPISavedCartOutboundStream      ; mktCPISavedCartOutboundSyncDataStream ; Cart                    ; outboundSyncMktCPISavedCartChannel ; {item.saveTime} IS NOT NULL AND {item.user} IN $customerFilter AND ({item.user} IN $consentFilterInteraction AND ({item.savedBy} IS NULL OR {item.savedBy} IN $consentFilterInteraction))                                              
                                              ; mktCPISavedCartEntryOutboundStream ; mktCPISavedCartOutboundSyncDataStream ; CartEntry               ; outboundSyncMktCPISavedCartChannel ; {item.order} IN ({{ SELECT {c.pk} FROM {Cart AS c} WHERE {c.saveTime} IS NOT NULL AND {c.user} IN $customerFilter AND ({c.user} IN $consentFilterInteraction AND ({c.savedBy} IS NULL OR {c.savedBy} IN $consentFilterInteraction))}}) 
                                              
INSERT_UPDATE OutboundSyncCronJob ; code[unique = true]                ; job(code)                           ; sessionLanguage(isoCode)[default = en] 
                                  ; mktCPISavedCartOutboundSyncCronJob ; mktCPIoDataSavedCartOutboundSyncJob ;                                        
