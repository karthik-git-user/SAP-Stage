$cpiTenantHostName=https://tester.hana.ondemand.com

# -----------------------------------------------------------------------
# Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
# -----------------------------------------------------------------------
$consent=({{ SELECT {ct.pk} FROM {ConsentTemplate AS ct} WHERE {ct.id} not in ('MARKETING_NEWSLETTER', 'SAPYMKT_PERS') }})
 
################################################################
# This sets up the credential (username/password) called "mktCPIBasicCredentails"
# ##############################################################
INSERT_UPDATE BasicCredential ; id[unique = true]      ; username ; password 
                              ; mktCPIBasicCredentails ; username ; password 
                              
###############################################################
# This sets up the endpoint called "mktCPIConsentEndpoint."
# #############################################################
INSERT_UPDATE Endpoint ; id[unique = true]     ; version[unique = true] ; name                  ; specUrl                                                                                                      
                       ; mktCPIConsentEndpoint ; unknown                ; mktCPIConsentEndpoint ; "$cpiTenantHostName/gw/odata/SAP/REPLICATE-CONSENT-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1/$metadata" 
                       
##############################################################
# This sets up a ConsumedDestination called "mktCPIConsentDestination."
# It uses the Endpoint and BasicCredential created above. The user calls
# the Outbound Service with the destination ID (e.g. "mktCPIConsentDestination").
# The Outbound Service looks up the details of the destination by ID,
# so it knows where to send the data
# ############################################################
INSERT_UPDATE DestinationTarget ; id[unique = true]              
                                ; mktCPIConsentDestinationTarget 
                                
INSERT_UPDATE ConsumedDestination ; id[unique = true]        ; url                                                                                                         ; endpoint(id, version)         ; credential(id)         ; destinationTarget(id)[default = mktCPIConsentDestinationTarget] ; additionalProperties(key, value)[map-delimiter=|]                                                           
                                  ; mktCPIConsentDestination ; "$cpiTenantHostName/gw/odata/SAP/REPLICATE-CONSENT-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1/Consents" ; mktCPIConsentEndpoint:unknown ; mktCPIBasicCredentails ;                                                                 ; "csrfURL->$cpiTenantHostName/gw/odata/SAP/REPLICATE-CONSENT-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1" 
                                  
################################################################
# Setup Outbound Sync configuration container
# ##############################################################
INSERT_UPDATE OutboundSyncStreamConfigurationContainer ; id[unique = true]                   ;  
                                                       ; mktCPIConsentOutboundSyncDataStream ;  
                                                       
INSERT_UPDATE OutboundSyncJob ; code[unique = true]               ; streamConfigurationContainer(id)    
                              ; mktCPIoDataConsentOutboundSyncJob ; mktCPIConsentOutboundSyncDataStream 
                              
INSERT_UPDATE OutboundChannelConfiguration ; code[unique = true]              ; integrationObject(code) ; destination(id)          
                                           ; outboundSyncMktCPIConsentChannel ; MKTOutboundConsent      ; mktCPIConsentDestination 
                                           
# Set up a Consent stream that will detect changes made to the Consent and include it in the mktCPIConsentOutboundSyncDataStream StreamConfigurationContainer
INSERT_UPDATE OutboundSyncStreamConfiguration ; streamId[unique = true]     ; container(id)                       ; itemTypeForStream(code) ; outboundChannelConfiguration(code) ; whereClause                        ;  
                                              ; mktCPIConsentOutboundStream ; mktCPIConsentOutboundSyncDataStream ; Consent                 ; outboundSyncMktCPIConsentChannel   ; {item.consentTemplate} IN $consent 
                                              
INSERT_UPDATE OutboundSyncCronJob ; code[unique = true]              ; job(code)                         ; sessionLanguage(isoCode)[default = en] 
                                  ; mktCPIConsentOutboundSyncCronJob ; mktCPIoDataConsentOutboundSyncJob ;                                        
