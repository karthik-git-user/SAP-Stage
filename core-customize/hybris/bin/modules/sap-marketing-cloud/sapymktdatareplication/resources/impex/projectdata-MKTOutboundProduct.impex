$cpiTenantHostName=https://tester.hana.ondemand.com

###############################################################
# This sets up the credential (username/password) called "mktCPIBasicCredentails"
# ##############################################################
INSERT_UPDATE BasicCredential; id[unique = true]   ; username; password
                            ; mktCPIBasicCredentails ; username   ; password

###############################################################
# This sets up the endpoint called "mktCPIProductEndpoint."
# #############################################################
INSERT_UPDATE Endpoint; id[unique = true]; version[unique = true]; name         ; specUrl
                      ; mktCPIProductEndpoint     ; unknown               ; mktCPIProductEndpoint ; "$cpiTenantHostName/gw/odata/SAP/REPLICATE-PRODUCT-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1/$metadata"

##############################################################
# This sets up a ConsumedDestination called "mktCPIProductDestination."
# It uses the Endpoint and BasicCredential created above. The user calls
# the Outbound Service with the destination ID (e.g. "mktCPIProductDestination").
# The Outbound Service looks up the details of the destination by ID,
# so it knows where to send the data
# ############################################################
INSERT_UPDATE DestinationTarget; id[unique = true]
;  mktCPIProductDestinationTarget

INSERT_UPDATE ConsumedDestination; id[unique = true]; url; endpoint(id, version); credential(id); destinationTarget(id)[default = mktCPIProductDestinationTarget]; additionalProperties(key, value)[map-delimiter=|]
; mktCPIProductDestination; "$cpiTenantHostName/gw/odata/SAP/REPLICATE-PRODUCT-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1/Products" ; mktCPIProductEndpoint:unknown ; mktCPIBasicCredentails ; ; "csrfURL->$cpiTenantHostName/gw/odata/SAP/REPLICATE-PRODUCT-FROM-SAP-COMMERCE-CLOUD-TO-SAP-MARKETING-CLOUD;v=1"

################################################################
# Setup Outbound Sync configuration container
# ##############################################################
INSERT_UPDATE OutboundSyncStreamConfigurationContainer  ; id[unique = true] ;
                                            ; mktCPIProdOutboundSyncDataStreams ;
                                            
INSERT_UPDATE OutboundSyncJob; code[unique = true]  ; streamConfigurationContainer(id)
                             ; mktCPIoDataProductOutboundSyncJob ; mktCPIProdOutboundSyncDataStreams
                             
INSERT_UPDATE OutboundChannelConfiguration; code[unique = true]; integrationObject(code); destination(id)
                                          ;outboundSyncMktCPIProductChannel ; MktOutboundProduct ; mktCPIProductDestination
                             
# Set up a Order stream that will detect changes made to the Order and include it in the mktCPIOrderOutboundSyncDataStream StreamConfigurationContainer
INSERT_UPDATE OutboundSyncStreamConfiguration; streamId[unique = true]; container(id)           ; itemTypeForStream(code); outboundChannelConfiguration(code); whereClause;
                                             ; mktCPIProductOutboundStream;    mktCPIProdOutboundSyncDataStreams ; Product; outboundSyncMktCPIProductChannel; {item.catalogVersion} IN ({{SELECT {CatalogVersion.pk} FROM {CatalogVersion LEFT JOIN Catalog ON {CatalogVersion.catalog} = {Catalog.pk}} WHERE {CatalogVersion.version}='Online' AND {Catalog.id}='electronicsProductCatalog'}});
                                            
INSERT_UPDATE OutboundSyncCronJob; code[unique = true] ; job(code) ; sessionLanguage(isoCode)[default = en]
                     ; mktCPIProductOutboundSyncCronJob ; mktCPIoDataProductOutboundSyncJob ;
